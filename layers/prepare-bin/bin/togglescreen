#!/usr/bin/env python3
import subprocess
import glob
from pathlib import Path

# xrandr_cmds = [(fn, open(fn).readlines()[1].replace('\n', '')) for fn in glob.glob(str(Path.home()) + "/.screenlayout/*.sh")]

# def get_referenced_devices(xrandr_cmd):
#     args = xrandr_cmd.split(' ')
#     devices = []
#     for idx, val in enumerate(args):
#         if (val == '--output'):
#             devices.append(args[idx+1])
#     return sorted(devices)

# referenced_devices = [(fn, get_referenced_devices(c)) for fn, c in xrandr_cmds]

present_devices = sorted([l.split(" ")[0] for l in subprocess.getoutput("xrandr --query").split("\n") if "connected" in l])
current_shape = subprocess.getoutput("xrandr --query").split("\n")[0].split(', ')[1].replace("current ", "")

is_desktop = (present_devices == ['DP-0', 'DP-1', 'DP-2', 'DP-3', 'HDMI-0', 'USB-C-0'])
is_laptop = (present_devices ==  ['DP-1-1', 'DP-1-2', 'DP-1-3', 'DP-1-3-1', 'DP-1-3-2', 'DP-1-3-3', 'HDMI-1-1', 'HDMI-1-2', 'HDMI-1-3', 'eDP-1-1'])
is_lab_desktop = (present_devices == ['DP-0', 'DP-1', 'DP-1-0', 'DP-1-1', 'DP-1-2', 'DP-1-3', 'DP-1-4', 'DP-1-5', 'DP-1-6', 'DP-1-7', 'DP-2', 'DP-3', 'DP-4', 'DP-5', 'DP-6', 'DP-7'])

if is_laptop:
    print("Laptop")
elif is_desktop:
    print("Desktop")
    if current_shape == "3840 x 1080":
        print(subprocess.getoutput("~/.screenlayout/desktop-dual-vert.sh"))
    elif current_shape == "2160 x 1920":
        print(subprocess.getoutput("~/.screenlayout/desktop-dual-horiz-vert.sh"))
    elif current_shape == "3000 x 1920":
        print(subprocess.getoutput("~/.screenlayout/desktop-dual-horiz.sh"))
    elif current_shape == "3240 x 1920":
        print(subprocess.getoutput("~/.screenlayout/desktop-triple-vert-horiz-vert.sh"))
    elif current_shape == "4080 x 1920" or current_shape == "5760 x 1080":
        print(subprocess.getoutput("~/.screenlayout/desktop-triple-vert.sh"))
elif is_lab_desktop:
    print(subprocess.getoutput("~/.screenlayout/lab-desktop-dual-vert.sh"))
else:
    print("Unknown device list:", present_devices)

exit(0)


raw_connected = [l for l in stdoutdata.split("\n") if " connected" in l]
enabled = [l for l in raw_connected if "mm" in l]

print("Connected")
for l in raw_connected:
    print(l)

# print("Enabled")
# for l in enabled:
#     print(l)

if len(raw_connected) == 4 and len(enabled) != 3:
    print("Laptop to triple")
    print(subprocess.getoutput("~/.screenlayout/triple-square.sh"))
if len(raw_connected) == 4 and len(enabled) == 3:
    print("Triple to laptop")
    print(subprocess.getoutput("~/.screenlayout/laptop-only-triple.sh"))
elif len(raw_connected) == 3 and (len(enabled) == 1 or len(enabled) == 3):
    print("Laptop to dual")
    print(subprocess.getoutput("~/.screenlayout/dual-monitor.sh"))
elif len(raw_connected) == 3 and len(enabled) == 2:
    print("dual to laptop")
    print(subprocess.getoutput("~/.screenlayout/laptop-only-dual.sh"))
elif len(raw_connected) == 2 and len(enabled) == 2:
    print("Single to laptop")
    print(subprocess.getoutput("~/.screenlayout/laptop-only-single.sh"))
elif len(raw_connected) == 2 and len(enabled) == 1:
    print("Laptop to single")
    print(subprocess.getoutput("~/.screenlayout/laptop-single-mirrored.sh"))
elif len(raw_connected) == 1 and len(enabled) == 1:
    print("Single screen laptop")
    print(subprocess.getoutput("~/.screenlayout/laptop-only.sh"))
else:
    print("Unhandled case: Connected:", len(raw_connected), "Enabled:", len(enabled))
    print(subprocess.getoutput("~/.screenlayout/laptop-only.sh"))


print("Done")
