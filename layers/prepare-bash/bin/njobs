#!/usr/bin/env python3

import subprocess
import csv
import io
import json
import requests
import argparse


def ssh_command(target: str, command: str) -> str | None:
    """SSH to the target host and run the command."""
    try:
        ssh_command = f"ssh {target} 'bash -c \"{command}\"'"
        result = subprocess.run(
            ssh_command,
            shell=True,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error: {e.stderr}")
        return None


def get_test_split_sequences() -> dict[str, int]:
    """
    Download JSON from https://raw.githubusercontent.com/kylevedder/SceneFlowZoo/master/data_prep_scripts/argo/av2_test_sizes.json

    and parse it to get the test split sequences.
    """
    url = "https://raw.githubusercontent.com/kylevedder/SceneFlowZoo/master/data_prep_scripts/argo/av2_test_sizes.json"
    response = requests.get(url)
    if response.status_code == 200:
        data = json.loads(response.text)
        return data
    else:
        print(f"Failed to download the JSON file. Status code: {response.status_code}")
        raise Exception("Failed to download the JSON file.")


def parse_csv_output(csv_output: str) -> list[str]:
    """Parse the CSV output to extract sequence names."""
    sequence_names = []
    csv_reader = csv.reader(io.StringIO(csv_output))

    for row in csv_reader:
        if row:
            sequence_names.append(row[1])

    return sequence_names


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Process some arguments.")
    parser.add_argument("job_prefix", type=str, help="The job prefix")
    parser.add_argument(
        "--with_finished",
        action="store_true",
        help="Add status FINISHED_SUCCESS to the command",
    )

    args = parser.parse_args()

    job_prefix: str = args.job_prefix
    include_finished: bool = args.with_finished

    # SSH connection details
    target = "nlaptop"
    # command to be run on the remote machine
    command = f"/home/kvedder/bin/ngc-cli/ngc batch list --duration=7D --column=name --status RUNNING"
    if include_finished:
        command += " --status FINISHED_SUCCESS"
    command += " --format_type csv"

    test_split_sequences = get_test_split_sequences()
    # Run the SSH command and get the CSV output
    csv_output = ssh_command(target, command)
    if not csv_output:
        print("No output received from the remote machine.")
        exit(1)
    # Parse the CSV output to extract sequence names
    sequence_names = parse_csv_output(csv_output)

    expected_jobs = set(test_split_sequences.keys())

    running_jobs = set(
        name.split("_")[-1] for name in sequence_names if name.startswith(job_prefix)
    )

    missing_jobs = expected_jobs - running_jobs
    print(f"Missing jobs: {missing_jobs}")
