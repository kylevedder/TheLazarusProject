#!/usr/bin/env python3
# Add ~/bin to the PYTHONPATH
import sys
from pathlib import Path

sys.path.append(str(Path("~/bin/").expanduser().absolute()))

import subprocess
import json
import argparse
from typing import Optional, Dict

# Import logging
import logging

# Setup logging to log to a file in /tmp/togglescreen.log
logging.basicConfig(
    filename="/tmp/togglescreen.log",
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

logging.debug("Starting togglescreen")

try:
    from displayfingerprint import get_monitor_info
except Exception as e:
    logging.error(f"Error: {e}")
    raise e


def get_available_configurations() -> Dict[str, Path]:
    layout_dir = Path("~/.screenlayout/").expanduser().absolute()
    sh_files = sorted(layout_dir.glob("*.sh"))
    # Log an error if no .sh files are found
    if len(sh_files) == 0:
        logging.error(f"No .sh files found in {layout_dir}")

    assert len(sh_files) > 0, f"No .sh files found in {layout_dir}"
    return {file.stem: file for file in sh_files}


available_configurations = get_available_configurations()

# Take as argument a default configuration name
parser = argparse.ArgumentParser(description="Apply a monitor configuration.")
parser.add_argument(
    "--default_config_name",
    default="desktop-triple-vert",
    type=str,
    help="A semantic name for the default monitor configuration.",
    choices=sorted(available_configurations.keys()),
)
args = parser.parse_args()


def load_fingerprints() -> Dict[str, Dict[str, Dict[str, str]]]:
    result = {}
    for file in fingerprint_folder.glob("*.json"):
        with open(file, "r") as f:
            result[file.stem] = json.load(f)
    return result


def get_matched_monitor_info(current_monitor_info, fingerprints) -> Optional[str]:
    for name, fingerprint in sorted(fingerprints.items()):
        if sorted(fingerprint.items()) == sorted(current_monitor_info.items()):
            return name
    return None


def run_configuration(config_name: str):
    assert (
        config_name in available_configurations
    ), f"Configuration {config_name} not found in {available_configurations.keys()}"
    config_path = available_configurations[config_name]
    print(subprocess.getoutput(str(config_path)))


fingerprint_folder = (
    Path("~/.screenlayout/monitor_fingerprints").expanduser().absolute()
)
# Log the fingerprint folder
logging.debug(f"Fingerprint folder: {fingerprint_folder}")
known_fingerprint = get_matched_monitor_info(get_monitor_info(), load_fingerprints())
# Log the known fingerprint
logging.debug(f"Known fingerprint: {known_fingerprint}")


print(f"Known fingerprint name: {known_fingerprint}")

# Now we can use the matched_monitor_info to apply the configuration
# to the current monitor setup.

if known_fingerprint == "tripleverticle":
    logging.debug("Applying desktop-triple-vert configuration")
    run_configuration("desktop-triple-vert")
else:
    logging.debug("Applying default configuration")
    run_configuration(args.default_config_name)

logging.debug("Done")
