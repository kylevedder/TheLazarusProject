#!/usr/bin/env python3
import numpy as np
import pickle
from pathlib import Path
import json
import argparse
import zipfile


def read_zip(file_path):
    # Validate if the file exists
    if not Path(file_path).is_file():
        print("File does not exist.")
        return

    # Open the zip file and store it as a dict
    data = zipfile.ZipFile(file_path, "r")
    return data


def read_npz(file_path):
    # Validate if the file exists
    if not Path(file_path).is_file():
        print("File does not exist.")
        return

    # Open the npz file and store it as a dict
    data = np.load(file_path, allow_pickle=True)
    return data


def read_pickle(file_path):
    # Validate if the file exists
    if not Path(file_path).is_file():
        print("File does not exist.")
        return

    # Open the pickle file and store it as a dict
    with open(file_path, "rb") as f:
        data = pickle.load(f)
    return data


def read_feather(file_path):
    # Validate if the file exists
    if not Path(file_path).is_file():
        print("File does not exist.")
        return

    import pandas as pd

    # Open the feather file and store it as a dict
    data = pd.read_feather(file_path)
    return data


def read_json(file_path):
    # Validate if the file exists
    if not Path(file_path).is_file():
        print("File does not exist.")
        return

    # Open the json file and store it as a dict
    with open(file_path, "r") as f:
        data = json.load(f)
    return data


def read_pth(file_path):
    # Validate if the file exists
    if not Path(file_path).is_file():
        print("File does not exist.")
        return

    import torch

    # Open the pth file and store it as a dict
    data = torch.load(file_path)
    return data


def read_h5(file_path):
    import h5py

    # Open the h5 file and store it as a dict
    data = h5py.File(file_path, "r")
    return data


def print_zip(data):
    # Print the keys and types of each item in the dict
    for key in data.namelist():
        print(f"Key: {key}")


def _print_recusrive(data, level=0):
    if isinstance(data, dict):
        print(f"{'  ' * level}Type: dict")
        for key, value in data.items():
            print(f"{'  ' * level}Key: {key}")
            _print_recusrive(value, level + 1)
    elif isinstance(data, list):
        print(f"{'  ' * level}Type: list")
        for i, value in enumerate(data):
            print(f"{'  ' * level}Index: {i}")
            _print_recusrive(value, level + 1)
    elif isinstance(data, np.ndarray):
        if data.dtype == object:
            print(f"{'  ' * level}Dtype: {data.dtype}")
            print(f"{'  ' * level}Shape: {data.shape}")
            for i, value in enumerate(data):
                print(f"{'  ' * level}Index: {i}")
                _print_recusrive(value, level + 1)
        else:
            print(f"{'  ' * level}Dtype: {data.dtype}")
            print(f"{'  ' * level}Shape: {data.shape}")
    else:
        print(f"{'  ' * level}Value: {data}")


def print_npz(data):
    _print_recusrive(data)


def print_pickle(data):
    print(data)


def print_feather(data):
    print(data)


def print_json(data):
    # Pretty print the json data
    print(json.dumps(data, indent=4))


def print_pth(data):
    _print_recusrive(data)


def print_h5(data):
    # Enumerate through the groups and datasets
    for key, value in data.items():
        print(f"Key: {key}")
        _print_recusrive(value)


# Parse the command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("file_path", help="Path to the file", type=Path)
parser.add_argument(
    "-p", "--preamble", help="Preamble python command to eval", type=str, default=None
)
# Add an optional argument to take a python command to eval
parser.add_argument(
    "-e", "--eval", help="Python command to eval", type=str, default=None
)
args = parser.parse_args()

if args.preamble:
    exec(args.preamble)

if args.file_path.suffix == ".npz" or args.file_path.suffix == ".npy":
    data = read_npz(args.file_path)
elif args.file_path.suffix == ".pickle" or args.file_path.suffix == ".pkl":
    data = read_pickle(args.file_path)
elif args.file_path.suffix == ".feather":
    data = read_feather(args.file_path)
elif args.file_path.suffix == ".json":
    data = read_json(args.file_path)
elif args.file_path.suffix == ".zip":
    data = read_zip(args.file_path)
elif args.file_path.suffix == ".pth":
    data = read_pth(args.file_path)
elif args.file_path.suffix == ".h5":
    data = read_h5(args.file_path)
else:
    raise ValueError(f"File type {args.file_path.suffix} not supported.")

if args.eval:
    # If the eval argument is provided, eval the command
    print(eval(args.eval))
else:
    # Otherwise, print the data
    if args.file_path.suffix == ".npz" or args.file_path.suffix == ".npy":
        print_npz(data)

    elif args.file_path.suffix == ".pickle" or args.file_path.suffix == ".pkl":
        print_pickle(data)

    elif args.file_path.suffix == ".feather":
        print_feather(data)
    elif args.file_path.suffix == ".json":
        print_json(data)
    elif args.file_path.suffix == ".zip":
        print_zip(data)
    elif args.file_path.suffix == ".pth":
        print_pth(data)
    elif args.file_path.suffix == ".h5":
        print_h5(data)
    else:
        print("File type not supported.")
